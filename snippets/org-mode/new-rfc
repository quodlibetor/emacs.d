# key: new-rfc
# name: new-rfc
# --
#+Title: $1
#+Author: Brandon W Maister
#+Email: bwm@knewton.com

#+OPTIONS: toc:3 H:4 num:nil email:t timestamp:nil

Owner: Brandon W Maister <bwm@knewton.com>
Status: proposed
Comment by: `(format-time-string "%Y-%m-%d" (time-add (current-time) (* 60 60 24 10)))`


* Foreward

  Identify your audience before you start writing. These are the
  people who are impacted by what you’re proposing, subject matter experts, or
  people who can make the proposal happen/not happen. It may be Product, a
  particular team, tech-at-large, or some other group. Address that audience at
  the beginning of your doc.

  In one sentence, summarize what’s being proposed. Then briefly describe how the
  document will make a case for the proposal. This section should be no more than
  a couple sentences.

* Motivation

  Why is this change being proposed? You first need to state the problem and make
  a case that the problem is worth solving.

  - Focus on the impact of the problem - monetary expense, wasted time,
    unnecessary risk, customer unhappiness, etc.
  - Quantify the impact. Metrics are great, estimates are ok too.
  - State the immediate cause of the problem. Some potential causes could be
    scaling issues, missing functionality, or broken process.
  - Use terminology that’s relevant to your audience.

  Don’t write too much. This section should be less than one page - one or two
  paragraphs or a couple bullet points. Do not go in depth about the cause of the
  problem. If the problem is unhappy customers because of scaling-induced
  slowness, it’s ok to simply say “because of scaling issues”.

  Don’t describe your solution in this section. It’s ok to allude to a better way
  or suggest we could achieve a net-positive gain by fixing the problem, but
  don’t spend more than one or two sentences talking about solutions. You’ll go
  into more detail later.

* Background (Optional)

  The purpose of this section is to provide context for the reader to understand
  what you’re proposing. Describe the current state of the world to illustrate
  the scope and nature of the problem - go into detail about the immediate causes
  mentioned in the Motivation section. Some things to talk about could be data
  schemas, access patterns, race conditions, unnecessary dependencies, or
  duplicated logic (this is not an exhaustive list).

  People are lazy and don’t read, so you’ll need to prioritize information. Don’t
  bury important details alongside less important information. Pictures are good
  too.

  The level of detail in the section is highly dependent on your target audience
  and the issues you’re describing. If the motivation is missing functionality,
  you might skip this section entirely. When in doubt err on the side of being
  too concise and put deeper background info in the appendix.

* Requirements

  AKA success criteria. Briefly (one or two sentences) state your solution, and
  then talk about all the good stuff stakeholders will get once the proposal is
  implemented - impact of the solution. This section is a counterpart to the
  Motivation section and the same guidelines apply.

** High level behavior
** Performance Requirements / How does it scale

* Implementation
** Architecture

** Infrastructure Needs

   Are there any new costs or AWS infrastructure involved

** Testing
** Monitoring

* Reviews
* Infrastructure Reviews

* puml styles                                                      :noexport:

#+BEGIN_SRC plantuml :noweb-ref white-on-black :exports none
  BackgroundColor white-#eee
  ArrowColor Black
  BorderColor Black
  FontSize 14
#+END_SRC

#+BEGIN_SRC plantuml :noweb-ref color-river :exports none
#0077a5
#+END_SRC

#+BEGIN_SRC plantuml :noweb-ref knewton-blue :exports none
#00abc7
#+END_SRC
#+BEGIN_SRC plantuml :noweb-ref aws-yellow-grad :exports none
#eeba37-#fee6b0
#+END_SRC
#+BEGIN_SRC plantuml :noweb-ref aws-yellow :exports none
#eeba37
#+END_SRC



#+BEGIN_SRC plantuml :noweb-ref uml-style :exports none
  skinparam defaultFontName Inconsolata
  skinparam defaultFontSize 12

  skinparam sequence {
      ArrowColor <<color-river>>
      LifeLineBorderColor <<color-river>>
  }

  skinparam object {
      <<white-on-black>>
  }

  skinparam class {
      <<white-on-black>>
  }
  skinparam component {
      <<white-on-black>>
  }

  skinparam actor {
      <<white-on-black>>
  }
  skinparam participant {
      <<white-on-black>>
  }
  skinparam entity {
      <<white-on-black>>
  }
  skinparam database {
      <<white-on-black>>
  }
  skinparam activity {
      <<white-on-black>>
  }
  skinparam note {
      <<white-on-black>>
  }
  skinparam node {
      <<white-on-black>>
  }
  skinparam state {
      <<white-on-black>>
  }
  hide empty methods
  hide empty members
#+END_SRC
